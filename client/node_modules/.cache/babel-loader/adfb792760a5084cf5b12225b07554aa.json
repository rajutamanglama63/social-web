{"ast":null,"code":"import { REGISTER_REQUEST, REGISTER_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, REGISTER_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE } from \"../constants/actionTypes\";\nimport axios from \"axios\";\nexport const register = newUserData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"/auth/register\", newUserData, {\n      headers: {\n        \"Content-Type\": \"application/json,\"\n      }\n    });\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data.newUser\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: REGISTER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST,\n      payload: null\n    });\n    const {\n      data\n    } = await axios.post(\"/auth/login\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.existingUser\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOGIN_FAILURE,\n      payload: error.resposne.data.meg\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const removeCookie = await axios.get(\"/auth/logout\");\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: removeCookie\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOGOUT_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/raju/Web Project/mern/socialPractise/client/src/redux/actions/authActions.js"],"names":["REGISTER_REQUEST","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","axios","register","newUserData","dispatch","type","data","post","headers","payload","newUser","error","console","log","message","login","email","password","existingUser","resposne","meg","logout","removeCookie","get"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,gBAA1B,EAA4CC,aAA5C,EAA2DC,aAA3D,EAA0EC,aAA1E,EAAyFC,gBAAzF,EAA2GC,cAA3G,EAA2HC,cAA3H,EAA2IC,cAA3I,QAAgK,0BAAhK;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,WAAD,IAAiB,MAAOC,QAAP,IAAoB;AACzD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGb;AADF,KAAD,CAAR;AAIA,UAAM;AAACc,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,IAAN,CAAW,gBAAX,EAA6BJ,WAA7B,EAA0C;AAACK,MAAAA,OAAO,EAAG;AAAC,wBAAiB;AAAlB;AAAX,KAA1C,CAArB;AAEAJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGR,gBADF;AAELY,MAAAA,OAAO,EAAGH,IAAI,CAACI;AAFV,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGZ,gBADF;AAELgB,MAAAA,OAAO,EAAGE,KAAK,CAACG;AAFX,KAAD,CAAR;AAIH;AACJ,CAnBM;AAqBP,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOb,QAAP,IAAoB;AAC1D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGX,aADF;AAELe,MAAAA,OAAO,EAAG;AAFL,KAAD,CAAR;AAKA,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAML,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0B;AAACS,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAA1B,EAA6C;AAACT,MAAAA,OAAO,EAAG;AAAC,wBAAiB;AAAlB;AAAX,KAA7C,CAArB;AAEAJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGV,aADF;AAELc,MAAAA,OAAO,EAAGH,IAAI,CAACY;AAFV,KAAD,CAAR;AAIH,GAZD,CAYE,OAAOP,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGT,aADF;AAELa,MAAAA,OAAO,EAAGE,KAAK,CAACQ,QAAN,CAAeb,IAAf,CAAoBc;AAFzB,KAAD,CAAR;AAIH;AACJ,CApBM;AAsBP,OAAO,MAAMC,MAAM,GAAG,MAAM,MAAOjB,QAAP,IAAoB;AAC5C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGP;AADF,KAAD,CAAR;AAIA,UAAMwB,YAAY,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAU,cAAV,CAA3B;AAEAnB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGN,cADF;AAELU,MAAAA,OAAO,EAAGa;AAFL,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOX,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAGL,cADF;AAELS,MAAAA,OAAO,EAAGE,KAAK,CAACG;AAFX,KAAD,CAAR;AAIH;AACJ,CAnBM","sourcesContent":["import {REGISTER_REQUEST, REGISTER_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, REGISTER_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE} from \"../constants/actionTypes\"\nimport axios from \"axios\"\n\nexport const register = (newUserData) => async (dispatch) => {\n    try {\n        dispatch({\n            type : REGISTER_REQUEST\n        });\n\n        const {data} = await axios.post(\"/auth/register\", newUserData, {headers : {\"Content-Type\" : \"application/json,\"}});\n\n        dispatch({\n            type : REGISTER_SUCCESS,\n            payload : data.newUser\n        });\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : REGISTER_FAILURE,\n            payload : error.message\n        });\n    }\n};\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        dispatch({\n            type : LOGIN_REQUEST,\n            payload : null\n        });\n\n        const {data} = await axios.post(\"/auth/login\", {email, password}, {headers : {\"Content-Type\" : \"application/json\"}});\n\n        dispatch({\n            type : LOGIN_SUCCESS,\n            payload : data.existingUser\n        });\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : LOGIN_FAILURE,\n            payload : error.resposne.data.meg\n        })\n    }\n};\n\nexport const logout = () => async (dispatch) => {\n    try {\n        dispatch({\n            type : LOGOUT_REQUEST\n        });\n\n        const removeCookie = await axios.get(\"/auth/logout\");\n\n        dispatch({\n            type : LOGOUT_SUCCESS,\n            payload : removeCookie\n        })\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : LOGOUT_FAILURE,\n            payload : error.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}