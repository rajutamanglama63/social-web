{"ast":null,"code":"import { REGISTER_REQUEST, REGISTER_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, REGISTER_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from \"../constants/actionTypes\";\nimport axios from \"axios\";\nexport const register = newUserData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_REQUEST\n    });\n    const {\n      data\n    } = await axios.post(\"/auth/register\", newUserData, {\n      headers: {\n        \"Content-Type\": \"application/json,\"\n      }\n    });\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data.newUser\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: REGISTER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  try {\n    // this wired nested trycatch block is use here to avoid type error\n    try {\n      dispatch({\n        type: LOGIN_REQUEST\n      });\n      const {\n        data\n      } = await axios.post(\"/auth/login\", {\n        email,\n        password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data.existingUser\n      });\n    } catch (error) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: error.response.data.msg\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const loadUser = () => async dispatch => {\n  try {\n    try {\n      dispatch({\n        type: LOAD_USER_REQUEST\n      });\n      const {\n        data\n      } = await axios.get(\"/user/profile/me\");\n      dispatch({\n        type: LOAD_USER_SUCCESS,\n        payload: data.user\n      });\n    } catch (error) {\n      dispatch({\n        type: LOAD_USER_FAILURE,\n        payload: error.response.data.msg\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const removeCookie = await axios.get(\"/auth/logout\");\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: removeCookie\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOGOUT_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/raju/Web Project/mern/socialPractise/client/src/redux/actions/authActions.js"],"names":["REGISTER_REQUEST","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","axios","register","newUserData","dispatch","type","data","post","headers","payload","newUser","error","console","log","message","login","email","password","existingUser","response","msg","loadUser","get","user","logout","removeCookie"],"mappings":"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","sourcesContent":["import {\n    REGISTER_REQUEST, \n    REGISTER_FAILURE, \n    LOGIN_REQUEST, \n    LOGIN_SUCCESS, \n    LOGIN_FAILURE, \n    REGISTER_SUCCESS, \n    LOGOUT_REQUEST, \n    LOGOUT_SUCCESS, \n    LOGOUT_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAILURE\n} from \"../constants/actionTypes\"\nimport axios from \"axios\"\n\nexport const register = (newUserData) => async (dispatch) => {\n    try {\n        dispatch({\n            type : REGISTER_REQUEST\n        });\n\n        const {data} = await axios.post(\"/auth/register\", newUserData, {headers : {\"Content-Type\" : \"application/json,\"}});\n\n        dispatch({\n            type : REGISTER_SUCCESS,\n            payload : data.newUser\n        });\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : REGISTER_FAILURE,\n            payload : error.message\n        });\n    }\n};\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        // this wired nested trycatch block is use here to avoid type error\n        try {\n            dispatch({\n                type : LOGIN_REQUEST,\n            });\n    \n            const {data} = await axios.post(\"/auth/login\", {email, password}, {headers : {\"Content-Type\" : \"application/json\"}});\n    \n            dispatch({\n                type : LOGIN_SUCCESS,\n                payload : data.existingUser\n            });\n        } catch (error) {\n            dispatch({\n                type : LOGIN_FAILURE,\n                payload : error.response.data.msg\n            })\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const loadUser = () => async (dispatch) => {\n    try {\n        try {\n            dispatch({\n                type : LOAD_USER_REQUEST\n            });\n\n            const {data} = await axios.get(\"/user/profile/me\");\n\n            dispatch({\n                type : LOAD_USER_SUCCESS,\n                payload : data.user\n            })\n        } catch (error) {\n            dispatch({\n                type : LOAD_USER_FAILURE,\n                payload : error.response.data.msg\n            })\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    try {\n        dispatch({\n            type : LOGOUT_REQUEST\n        });\n\n        const removeCookie = await axios.get(\"/auth/logout\");\n\n        dispatch({\n            type : LOGOUT_SUCCESS,\n            payload : removeCookie\n        })\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : LOGOUT_FAILURE,\n            payload : error.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}