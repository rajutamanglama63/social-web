{"ast":null,"code":"import { REGISTER_REQUEST, REGISTER_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, REGISTER_SUCCESS, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from \"../constants/actionTypes\";\nimport axios from \"axios\";\nexport const userRegistration = userData => async dispatch => {\n  try {\n    try {\n      dispatch({\n        type: REGISTER_REQUEST\n      });\n      const {\n        data\n      } = await axios.post(\"/auth/register\", userData, {\n        headers: {\n          \"Content-Type\": \"application/json,\"\n        }\n      });\n      console.log(data);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: data.newUser\n      });\n    } catch (error) {\n      dispatch({\n        type: REGISTER_FAILURE,\n        payload: error.message\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  try {\n    // this wired nested trycatch block is use here to avoid type error\n    try {\n      dispatch({\n        type: LOGIN_REQUEST\n      });\n      const {\n        data\n      } = await axios.post(\"/auth/login\", {\n        email,\n        password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data.token\n      });\n    } catch (error) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: error.response.data.msg\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const loadUser = () => async dispatch => {\n  try {\n    try {\n      dispatch({\n        type: LOAD_USER_REQUEST\n      });\n      const {\n        data\n      } = await axios.get(\"/user/profile/me\");\n      dispatch({\n        type: LOAD_USER_SUCCESS,\n        payload: data.user\n      });\n    } catch (error) {\n      dispatch({\n        type: LOAD_USER_FAILURE,\n        payload: error.response.data.msg\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/auth/logout\");\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: data.msg\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LOGOUT_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/raju/Web Project/mern/socialPractise/client/src/redux/actions/authActions.js"],"names":["REGISTER_REQUEST","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER_SUCCESS","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","axios","userRegistration","userData","dispatch","type","data","post","headers","console","log","payload","newUser","error","message","login","email","password","token","response","msg","loadUser","get","user","logout"],"mappings":"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","sourcesContent":["import {\n    REGISTER_REQUEST, \n    REGISTER_FAILURE, \n    LOGIN_REQUEST, \n    LOGIN_SUCCESS, \n    LOGIN_FAILURE, \n    REGISTER_SUCCESS, \n    LOGOUT_REQUEST, \n    LOGOUT_SUCCESS, \n    LOGOUT_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOAD_USER_FAILURE\n} from \"../constants/actionTypes\"\nimport axios from \"axios\"\n\nexport const userRegistration = (userData) => async (dispatch) => {\n    try {\n        try {\n            dispatch({\n                type : REGISTER_REQUEST\n            });\n    \n            const {data} = await axios.post(\"/auth/register\", userData, {headers : {\"Content-Type\" : \"application/json,\"}});\n            console.log(data)\n    \n            dispatch({\n                type : REGISTER_SUCCESS,\n                payload : data.newUser\n            });\n        } catch (error) {\n            dispatch({\n                type : REGISTER_FAILURE,\n                payload : error.message\n            });\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const login = (email, password) => async (dispatch) => {\n    try {\n        // this wired nested trycatch block is use here to avoid type error\n        try {\n            dispatch({\n                type : LOGIN_REQUEST,\n            });\n    \n            const {data} = await axios.post(\"/auth/login\", {email, password}, {headers : {\"Content-Type\" : \"application/json\"}});\n    \n            dispatch({\n                type : LOGIN_SUCCESS,\n                payload : data.token\n            });\n        } catch (error) {\n            dispatch({\n                type : LOGIN_FAILURE,\n                payload : error.response.data.msg\n            })\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const loadUser = () => async (dispatch) => {\n    try {\n        try {\n            dispatch({\n                type : LOAD_USER_REQUEST\n            });\n\n            const {data} = await axios.get(\"/user/profile/me\");\n\n            dispatch({\n                type : LOAD_USER_SUCCESS,\n                payload : data.user\n            })\n        } catch (error) {\n            dispatch({\n                type : LOAD_USER_FAILURE,\n                payload : error.response.data.msg\n            })\n        }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nexport const logout = () => async (dispatch) => {\n    try {\n        dispatch({\n            type : LOGOUT_REQUEST\n        });\n\n        const {data} = await axios.get(\"/auth/logout\");\n\n        dispatch({\n            type : LOGOUT_SUCCESS,\n            payload : data.msg\n        })\n    } catch (error) {\n        console.log(error);\n        dispatch({\n            type : LOGOUT_FAILURE,\n            payload : error.message\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}