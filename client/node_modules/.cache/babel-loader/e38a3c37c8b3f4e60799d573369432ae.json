{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { authReducer } from \"./reducers/authReducer\";\nimport { postReducer } from \"./reducers/postReducer\";\nimport { likePostReducer } from \"./reducers/likePostReducer\";\nimport { commentReducer } from \"./reducers/commentReducer\";\nimport { allUserReducer } from \"./reducers/allUsersReducer\";\nimport { getMyPostsReducer } from \"./reducers/getMyPostsReducer\";\nimport { addNewPostReducer } from \"./reducers/addNewPostReducer\";\nimport { deletePostReducer } from \"./reducers/deletePostReducer\";\nimport { editPostReducer } from \"./reducers/editPostReducer\";\nimport { updateProfileReducer } from \"./reducers/updateProfileReducer\";\nimport { changePswdReducer } from \"./reducers/changePswdReducer\";\nimport { deleteUserReducer } from \"./reducers/deleteUserReducer\";\nimport { forgotPasswordReducer } from \"./reducers/forgotPasswordReducer\";\nimport { resetPasswordReducer } from \"./reducers/pswdResetReducer\";\nimport { getUserAccountReducer } from \"./reducers/getUserAccountReducer\";\nimport { getUserPostReducer } from \"./reducers/getUserPostReducer\";\nconst middleware = [thunk];\nconst reducers = combineReducers({\n  auth: authReducer,\n  posts: postReducer,\n  likePost: likePostReducer,\n  comment: commentReducer,\n  allUsers: allUserReducer,\n  getMyPosts: getMyPostsReducer,\n  addPost: addNewPostReducer,\n  postDelete: deletePostReducer,\n  editPost: editPostReducer,\n  updateUserProfile: updateProfileReducer,\n  pswdChange: changePswdReducer,\n  deactivateUser: deleteUserReducer,\n  forgotPassword: forgotPasswordReducer,\n  resetPswd: resetPasswordReducer,\n  getUserAccount: getUserAccountReducer,\n  getUserPost: getUserPostReducer\n});\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/home/raju/Web Project/mern/socialPractise/client/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","authReducer","postReducer","likePostReducer","commentReducer","allUserReducer","getMyPostsReducer","addNewPostReducer","deletePostReducer","editPostReducer","updateProfileReducer","changePswdReducer","deleteUserReducer","forgotPasswordReducer","resetPasswordReducer","getUserAccountReducer","getUserPostReducer","middleware","reducers","auth","posts","likePost","comment","allUsers","getMyPosts","addPost","postDelete","editPost","updateUserProfile","pswdChange","deactivateUser","forgotPassword","resetPswd","getUserAccount","getUserPost","store"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAEA,MAAMC,UAAU,GAAG,CAAClB,KAAD,CAAnB;AAEA,MAAMmB,QAAQ,GAAGrB,eAAe,CAAC;AAC7BsB,EAAAA,IAAI,EAAGlB,WADsB;AAE7BmB,EAAAA,KAAK,EAAGlB,WAFqB;AAG7BmB,EAAAA,QAAQ,EAAGlB,eAHkB;AAI7BmB,EAAAA,OAAO,EAAGlB,cAJmB;AAK7BmB,EAAAA,QAAQ,EAAGlB,cALkB;AAM7BmB,EAAAA,UAAU,EAAGlB,iBANgB;AAO7BmB,EAAAA,OAAO,EAAGlB,iBAPmB;AAQ7BmB,EAAAA,UAAU,EAAGlB,iBARgB;AAS7BmB,EAAAA,QAAQ,EAAGlB,eATkB;AAU7BmB,EAAAA,iBAAiB,EAAGlB,oBAVS;AAW7BmB,EAAAA,UAAU,EAAGlB,iBAXgB;AAY7BmB,EAAAA,cAAc,EAAGlB,iBAZY;AAa7BmB,EAAAA,cAAc,EAAGlB,qBAbY;AAc7BmB,EAAAA,SAAS,EAAGlB,oBAdiB;AAe7BmB,EAAAA,cAAc,EAAGlB,qBAfY;AAgB7BmB,EAAAA,WAAW,EAAGlB;AAhBe,CAAD,CAAhC;AAmBA,MAAMmB,KAAK,GAAGvC,WAAW,CAACsB,QAAD,EAAWlB,mBAAmB,CAACF,eAAe,CAAC,GAAGmB,UAAJ,CAAhB,CAA9B,CAAzB;AAEA,eAAekB,KAAf","sourcesContent":["import {createStore, combineReducers, applyMiddleware} from \"redux\"\nimport thunk from \"redux-thunk\"\nimport {composeWithDevTools} from \"redux-devtools-extension\"\nimport { authReducer } from \"./reducers/authReducer\";\nimport { postReducer } from \"./reducers/postReducer\";\nimport { likePostReducer } from \"./reducers/likePostReducer\";\nimport { commentReducer } from \"./reducers/commentReducer\";\nimport { allUserReducer } from \"./reducers/allUsersReducer\";\nimport { getMyPostsReducer } from \"./reducers/getMyPostsReducer\";\nimport { addNewPostReducer } from \"./reducers/addNewPostReducer\";\nimport { deletePostReducer } from \"./reducers/deletePostReducer\";\nimport { editPostReducer } from \"./reducers/editPostReducer\";\nimport { updateProfileReducer } from \"./reducers/updateProfileReducer\";\nimport { changePswdReducer } from \"./reducers/changePswdReducer\";\nimport { deleteUserReducer } from \"./reducers/deleteUserReducer\";\nimport { forgotPasswordReducer } from \"./reducers/forgotPasswordReducer\";\nimport { resetPasswordReducer } from \"./reducers/pswdResetReducer\";\nimport { getUserAccountReducer } from \"./reducers/getUserAccountReducer\";\nimport { getUserPostReducer } from \"./reducers/getUserPostReducer\";\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n    auth : authReducer,\n    posts : postReducer,\n    likePost : likePostReducer,\n    comment : commentReducer,\n    allUsers : allUserReducer,\n    getMyPosts : getMyPostsReducer,\n    addPost : addNewPostReducer,\n    postDelete : deletePostReducer,\n    editPost : editPostReducer,\n    updateUserProfile : updateProfileReducer,\n    pswdChange : changePswdReducer,\n    deactivateUser : deleteUserReducer,\n    forgotPassword : forgotPasswordReducer,\n    resetPswd : resetPasswordReducer,\n    getUserAccount : getUserAccountReducer,\n    getUserPost : getUserPostReducer,\n});\n\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store;"]},"metadata":{},"sourceType":"module"}